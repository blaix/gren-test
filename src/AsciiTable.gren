module AsciiTable exposing (Align(..), Column, view)

import MicroArrayExtra as Array


type Align
    = AlignLeft
    | AlignRight


type alias Column a =
    { toString : a -> String
    , align : Align
    }


{-| This would normally return just the final String, but we need to postprocess
the table rows a little (insert a divider row in between).

So we return the original item next to the rendered row which makes the
postprocessing possible!

-}
view : Array (Column a) -> Array a -> Array { item : a, renderedRow : String }
view columns items =
    let
        columnData : Array (Array String)
        columnData =
            columns
                |> Array.map (\col -> Array.map col.toString items)

        columnLengths : Array Int
        columnLengths =
            columnData
                |> Array.map
                    (\colRows ->
                        Array.map String.length colRows
                            |> Array.maximum
                            |> Maybe.withDefault 0
                    )

        padFn : Int -> Align -> String -> String
        padFn length align string =
            case align of
                AlignLeft ->
                    String.padRight length ' ' string

                AlignRight ->
                    String.padLeft length ' ' string

        paddedColumnData : Array (Array String)
        paddedColumnData =
            Array.map3 (\col colLength colStrings -> Array.map (padFn colLength col.align) colStrings)
                columns
                columnLengths
                columnData
    in
    Array.map2
        (\item rowCells ->
            { item = item
            , renderedRow = String.join "  " rowCells
            }
        )
        items
        (Array.transpose paddedColumnData)
