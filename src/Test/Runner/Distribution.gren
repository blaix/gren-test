module Test.Runner.Distribution exposing (formatTable)

import AsciiTable
import Dict exposing (Dict)
import MicroArrayExtra as Array
import Set exposing (Set)
import Math


bars : Int
bars =
    30


formatTable :
    { a
        | runsElapsed : Int
        , distributionCount : Dict (Array String) Int
    }
    -> String
formatTable { runsElapsed, distributionCount } =
    let
        runsElapsed_ : Float
        runsElapsed_ =
            toFloat runsElapsed

        distributionArray : Array { key : Array String, value : Int }
        distributionArray =
            Dict.toArray distributionCount

        distribution : Array { labels : Array String, count : Int, percentage : Float }
        distribution =
            distributionArray
                |> Array.filter
                    (\{ key = labels, value = count } ->
                        not
                            ((Array.length labels == 1)
                                && (count == 0)
                                && isStrictSubset distributionArray labels
                            )
                    )
                |> Array.map
                    (\{ key = labels, value = count } ->
                        let
                            percentage : Float
                            percentage =
                                toFloat (Math.round (toFloat count / runsElapsed_ * 1000)) / 10
                        in
                        { labels = labels
                        , count = count
                        , percentage = percentage
                        }
                    )

        { trues = baseRows, falses = combinationsRows } =
            distribution
                |> Array.sortBy (\{ count } -> negate count)
                |> Array.partition (\{ labels } -> Array.length labels <= 1)

        reorderedTable =
            baseRows ++ combinationsRows

        rawTable : Array { item : { labels : Array String, count : Int, percentage : Float }, renderedRow : String }
        rawTable =
            formatAsciiTable runsElapsed_ reorderedTable

        { first = base, last = combinations } =
            rawTable
                |> Array.splitWhen
                    (\{ item } ->
                        let
                            { labels } =
                                item
                        in
                        Array.length labels > 1
                    )
                |> Maybe.withDefault { first = rawTable, last = [] }

        baseString =
            String.join "\n" (Array.map .renderedRow base)

        combinationsString_ =
            if Array.isEmpty combinations then
                ""

            else
                """
                Combinations (included in the above base counts):
                {COMBINATIONS}
                """
                    |> String.replace "{COMBINATIONS}" (String.join "\n" (Array.map .renderedRow combinations))
                    |> (\s -> "\n" ++ s)

        table =
            baseString ++ combinationsString_
    in
        """
        Distribution report:
        ====================
        {CATEGORIES}
        """
        |> String.replace "{CATEGORIES}" table


isStrictSubset : Array { key : Array String, value : Int } -> Array String -> Bool
isStrictSubset all combination =
    let
        combinationSet : Set String
        combinationSet =
            Set.fromArray combination

        allSets : Array (Set String)
        allSets =
            Array.map (.key >> Set.fromArray) all

        containsCombinationFully : Set String -> Bool
        containsCombinationFully set =
            not (Set.isEmpty (Set.diff set combinationSet))
                && Set.isEmpty (Set.diff combinationSet set)
    in
    Array.any containsCombinationFully allSets


formatAsciiTable :
    Float
    -> Array { labels : Array String, count : Int, percentage : Float }
    -> Array { item : { labels :Array String, count : Int, percentage : Float }, renderedRow : String }
formatAsciiTable runsElapsed items =
    AsciiTable.view
        [ { toString = \{ labels } -> "  " ++ viewLabels labels ++ ":"
          , align = AsciiTable.AlignLeft
          }
        , { toString = \{ percentage } -> String.fromFloat percentage ++ "%"
          , align = AsciiTable.AlignRight
          }
        , { toString = \{ count } -> "(" ++ String.fromInt count ++ "x)"
          , align = AsciiTable.AlignRight
          }
        , { toString = \{ count } -> barView { count = count, runsElapsed = runsElapsed }
          , align = AsciiTable.AlignLeft
          }
        ]
        items


barView : { count : Int, runsElapsed : Float } -> String
barView { count, runsElapsed } =
    let
        percentage : Float
        percentage =
            toFloat count / runsElapsed

        barsForPercentage : Float
        barsForPercentage =
            percentage * toFloat bars

        fullBars : Int
        fullBars =
            Math.round barsForPercentage
    in
    String.repeat fullBars "█"
        |> String.padRight bars '░'


viewLabels : Array String -> String
viewLabels labels =
    if Array.isEmpty labels then
        "<uncategorized>"

    else
        String.join ", " labels
