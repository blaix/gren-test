module Test.Internal exposing (Test(..), blankDescriptionFailure, duplicatedName, failNow, toString)

import Random
import Set exposing (Set)
import Test.Expectation exposing (Expectation)
import Test.Runner.Failure exposing (InvalidReason(..), Reason(..))


{-| All variants of this type has the `ElmTestVariant__` prefix so that
node-test-runner can recognize them in the compiled JavaScript. This lets us
add more variants here without having to update the runner.

For more information, see <https://github.com/elm-explorations/test/pull/153>

-}
type Test
    = ElmTestVariant__UnitTest ({} -> Array Expectation)
    | ElmTestVariant__FuzzTest (Random.Seed -> Int -> Array Expectation)
    | ElmTestVariant__Labeled String Test
    | ElmTestVariant__Skipped Test
    | ElmTestVariant__Only Test
    | ElmTestVariant__Batch (Array Test)


{-| Create a test that always fails for the given reason and description.
-}
failNow : { description : String, reason : Reason } -> Test
failNow record =
    ElmTestVariant__UnitTest
        (\{} -> [ Test.Expectation.fail record ])


blankDescriptionFailure : Test
blankDescriptionFailure =
    failNow
        { description = "This test has a blank description. Let's give it a useful one!"
        , reason = Invalid BadDescription
        }


duplicatedName : Array Test -> Result (Set String) (Set String)
duplicatedName tests =
    let
        names : Test -> Array String
        names test =
            case test of
                ElmTestVariant__Labeled str _ ->
                    [ str ]

                ElmTestVariant__Batch subtests ->
                    Array.flatMap names subtests

                ElmTestVariant__UnitTest _ ->
                    []

                ElmTestVariant__FuzzTest _ ->
                    []

                ElmTestVariant__Skipped subTest ->
                    names subTest

                ElmTestVariant__Only subTest ->
                    names subTest

        accumDuplicates : String -> { dups : Set String, uniques : Set String } -> { dups : Set String, uniques : Set String }
        accumDuplicates newName { dups, uniques } =
            if Set.member newName uniques then
                { dups = Set.insert newName dups, uniques = uniques }

            else
                { dups = dups, uniques = Set.insert newName uniques }

        { dups = dupsAccum, uniques = uniquesAccum } =
            Array.flatMap names tests
                |> Array.foldl accumDuplicates { dups = Set.empty, uniques = Set.empty }
    in
    if Set.isEmpty dupsAccum then
        Ok uniquesAccum

    else
        Err dupsAccum


toString : a -> String
toString =
    Gren.Kernel.Debug.toString
