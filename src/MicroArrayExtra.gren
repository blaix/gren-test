module MicroArrayExtra exposing
    ( splitWhen
    , transpose
    )


splitWhen : (a -> Bool) -> Array a -> Maybe { first : Array a, last : Array a }
splitWhen predicate list =
    findIndex predicate list
        |> Maybe.map (\i -> splitAt i list)


findIndex : (a -> Bool) -> Array a -> Maybe Int
findIndex pred array =
    Array.findFirst pred array
        |> Maybe.map .index


splitAt : Int -> Array a -> { first : Array a, last : Array a }
splitAt n xs =
    { first = Array.takeFirst n xs
    , last = Array.dropFirst n xs
    }


transpose : Array (Array a) -> Array (Array a)
transpose listOfArrays =
    Array.foldr (Array.map2 Array.pushFirst) (Array.repeat (rowsLength listOfArrays) []) listOfArrays


rowsLength : Array (Array a) -> Int
rowsLength listOfArrays =
    when Array.first listOfArrays is
        Nothing ->
            0

        Just x ->
            Array.length x
