module RandomRun exposing
    ( Chunk
    , RandomRun
    , append
    , compare
    , deleteChunk
    , empty
    , equal
    , get
    , isEmpty
    , isFull
    , length
    , nextChoice
    , replace
    , replaceChunkWithZero
    , set
    , sortChunk
    , swapChunks
    , swapIfOutOfOrder
    , toArray
    , update
    )

import MicroArrayExtra as Array
import Queue exposing (Queue)


type alias RandomRun =
    { data : Queue Int

    -- derived precomputed data:
    , length : Int
    }


{-| A cap for the maximum amount of entropy a fuzzer can use.
This stops infinite recursion (in cases where each step of the recursion makes
a PRNG choice), like in:

    infiniteArray : Fuzzer a -> Fuzzer (Array a)
    infiniteArray itemFuzzer =
        let
            go accArray =
                itemFuzzer
                    |> Fuzz.andThen (\item -> go (item :: accArray))
        in
        go []

-}
maxLength : Int
maxLength =
    64 * 1024


type alias Chunk =
    { size : Int
    , startIndex : Int
    }


empty : RandomRun
empty =
    { data = Queue.empty
    , length = 0
    }


isEmpty : RandomRun -> Bool
isEmpty run =
    run.length == 0


isFull : RandomRun -> Bool
isFull run =
    run.length == maxLength


nextChoice : RandomRun -> Maybe { first : Int, rest : RandomRun }
nextChoice run =
    case Queue.dequeue run.data of
        {  first = Nothing } ->
            Nothing

        {  first = Just first, rest } ->
            Just
                { first = first
                , rest = { run
                    | length = run.length - 1
                    , data = rest
                  }
                }


append : Int -> RandomRun -> RandomRun
append n run =
    { run
        | length = run.length + 1
        , data = Queue.enqueue n run.data
    }


isInBounds : Chunk -> RandomRun -> Bool
isInBounds { startIndex, size } run =
    startIndex + size <= run.length


length : RandomRun -> Int
length run =
    run.length


getChunk : Chunk -> RandomRun -> Maybe (Array Int)
getChunk chunk run =
    if isInBounds chunk run then
        run.data
            |> Queue.toArray
            |> Array.dropFirst chunk.startIndex
            |> Array.takeFirst chunk.size
            |> Just

    else
        Nothing


deleteChunk : Chunk -> RandomRun -> RandomRun
deleteChunk chunk run =
    if isInBounds chunk run then
        let
            list =
                Queue.toArray run.data

            result =
                { run
                    | length = run.length - chunk.size
                    , data =
                        (Array.takeFirst chunk.startIndex list
                            ++ Array.dropFirst (chunk.startIndex + chunk.size) list
                        )
                            |> Queue.fromArray
                }
        in
        result

    else
        run


replaceChunkWithZero : Chunk -> RandomRun -> RandomRun
replaceChunkWithZero chunk run =
    if isInBounds chunk run then
        -- TODO PERF: maybe `replace [...] run` would be faster?
        let
            list =
                Queue.toArray run.data
        in
        { run
            | data =
                Array.flatten
                    [ Array.takeFirst chunk.startIndex list
                    , Array.repeat chunk.size 0
                    , Array.dropFirst (chunk.startIndex + chunk.size) list
                    ]
                    |> Queue.fromArray
        }

    else
        run


sortChunk : Chunk -> RandomRun -> RandomRun
sortChunk chunk run =
    case getChunk chunk run of
        Nothing ->
            run

        Just chunkData ->
            let
                sortedIndexed : Array { index : Int, value : Int }
                sortedIndexed =
                    chunkData
                        |> Array.sort
                        |> Array.indexedMap
                            (\i value -> { index = chunk.startIndex + i, value = value })
            in
            replace sortedIndexed run


replace : Array { index : Int, value : Int } -> RandomRun -> RandomRun
replace values run =
    replaceInArray values run.length (Queue.toArray run.data)


{-| An optimization to not do Queue.toArray redundantly.

Expects `list == Queue.toArray run.data`
and `len == Queue.size run.data`

-}
replaceInArray : Array { index : Int, value : Int } -> Int -> Array Int -> RandomRun
replaceInArray values len list =
    { length = len
    , data =
        Array.foldl
            (\{ index, value = newValue } accArray ->
                if newValue < 0 then
                    accArray

                else
                    Array.set index newValue accArray
            )
            list
            values
            |> Queue.fromArray
    }


swapChunks :
    { leftChunk : Chunk, rightChunk : Chunk }
    -> RandomRun
    -> Maybe RandomRun
swapChunks { leftChunk, rightChunk } run =
    let
        list =
            Queue.toArray run.data
    in
    Maybe.map2
        (\lefts rights ->
            replaceInArray
                (Array.flatten
                    [ Array.indexedMap (\i n -> { index = rightChunk.startIndex + i, value = n }) lefts
                    , Array.indexedMap (\i n -> { index = leftChunk.startIndex + i, value = n }) rights
                    ]
                )
                run.length
                list
        )
        {- TODO PERF: both of these are doing the Queue.toArray etc. operations
           while we already have that factored out in the `list` var.
           We could factor that operation out `getChunk`?
        -}
        (getChunk leftChunk run)
        (getChunk rightChunk run)


swapIfOutOfOrder :
    { leftIndex : Int, rightIndex : Int }
    -> RandomRun
    ->
        Maybe
            { newRun : RandomRun
            , newLeftValue : Int
            , newRightValue : Int
            }
swapIfOutOfOrder { leftIndex, rightIndex } run =
    let
        list =
            Queue.toArray run.data
    in
    Maybe.map2
        (\left right ->
            if left > right then
                { newRun =
                    replaceInArray
                        [ { index = leftIndex, value = right }
                        , { index = rightIndex, value = left }
                        ]
                        run.length
                        list
                , newLeftValue = right
                , newRightValue = left
                }

            else
                { newRun = run
                , newLeftValue = left
                , newRightValue = right
                }
        )
        (Array.get leftIndex list)
        (Array.get rightIndex list)


get : Int -> RandomRun -> Maybe Int
get index run =
    run.data
        |> Queue.toArray
        |> Array.get index


set : Int -> Int -> RandomRun -> RandomRun
set index value run =
    if run.length <= index then
        run

    else
        { run
            | data =
                run.data
                    |> Queue.toArray
                    |> Array.set index value
                    |> Queue.fromArray
        }


sortKey : RandomRun -> Array Int
sortKey run =
    toArray run


compare : RandomRun -> RandomRun -> Order
compare a b =
    Basics.compare (sortKey a) (sortKey b)


toArray : RandomRun -> Array Int
toArray run =
    Queue.toArray run.data


update : Int -> (Int -> Int) -> RandomRun -> RandomRun
update index fn run =
    case get index run of
        Nothing ->
            run

        Just value ->
            replace [ { index = index, value = fn value } ] run


equal : RandomRun -> RandomRun -> Bool
equal run1 run2 =
    toArray run1 == toArray run2
