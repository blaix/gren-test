module SeedTestsMain exposing (main)

import SeedTests
import Expect
import Test exposing (test)
import Test.Runner.String exposing (Summary)
import Test.Runner.Node exposing (Program, run)


main : Program
main =
    let
        runSeedTest =
            Test.Runner.String.runWithOptions 1 SeedTests.fixedSeed

        testSummary =
            [ Array.map runSeedTest SeedTests.tests
            , Array.map (runSeedTest >> removeAutoFail) SeedTests.noAutoFail
            ]
                |> Array.flatten
                |> Array.foldl combineSummaries emptySummary
    in
    run <|
        test "There should be no failures" <| \_ ->
            Expect.equal 0 testSummary.failed


emptySummary : Summary
emptySummary =
    { output = ""
    , passed = 0
    , failed = 0
    , autoFail = Nothing
    }


{-| Considers autoFail as pass so we can actually write tests about Test.skip
and Test.only which do not automatically fail.
-}
removeAutoFail : Summary -> Summary
removeAutoFail summary =
    { summary | autoFail = Nothing }


combineSummaries : Summary -> Summary -> Summary
combineSummaries first second =
    { output = first.output ++ second.output
    , passed = first.passed + second.passed
    , failed = first.failed + second.failed
    , autoFail =
        case { l = first.autoFail, r = second.autoFail } of
            { l = Nothing, r = Nothing } ->
                Nothing

            { l = Nothing, r = Just secondAutoFail } ->
                Just secondAutoFail

            { l = Just firstAutoFail, r = Nothing } ->
                Just firstAutoFail

            { l = Just firstAutoFail, r = Just secondAutoFail } ->
                [ firstAutoFail, secondAutoFail ]
                    |> String.join "\n"
                    |> Just
    }
