module Main exposing (main)

{-| HOW TO RUN THESE TESTS

$ npm test

Note that this always uses an initial seed of 902101337, since it can't do effects.

-}

import Platform
import Node.Program as Program exposing (Program)
import Runner.Log
import Runner.String exposing (Summary)
import SeedTests
import Tests


main : Program {} {}
main =
    let
        program =
            Program.define
                { init = Program.startProgram { model = {}, command = {} }
                , update = \_ _ -> { model = {}, command = {} }
                }
    in
    runAllTests program


runAllTests : a -> a
runAllTests a =
    let
        runSeedTest =
            Runner.String.runWithOptions 1 SeedTests.fixedSeed

        _ =
            [ [ Runner.String.run Tests.all ]
            , Array.map runSeedTest SeedTests.tests
            , Array.map (runSeedTest >> removeAutoFail) SeedTests.noAutoFail
            ]
                |> Array.flatten
                |> Array.foldl combineSummaries emptySummary
                |> Runner.Log.logOutput
    in
    a


emptySummary : Summary
emptySummary =
    { output = ""
    , passed = 0
    , failed = 0
    , autoFail = Nothing
    }


{-| Considers autoFail as pass so we can actually write tests about Test.skip
and Test.only which do not automatically fail.
-}
removeAutoFail : Summary -> Summary
removeAutoFail summary =
    { summary | autoFail = Nothing }


combineSummaries : Summary -> Summary -> Summary
combineSummaries first second =
    { output = first.output ++ second.output
    , passed = first.passed + second.passed
    , failed = first.failed + second.failed
    , autoFail =
        case { l = first.autoFail, r = second.autoFail } of
            { l = Nothing, r = Nothing } ->
                Nothing

            { l = Nothing, r = Just secondAutoFail } ->
                secondAutoFail

            { l = Just firstAutoFail, r = Nothing } ->
                firstAutoFail

            { l = Just firstAutoFail, r = Just secondAutoFail } ->
                [ firstAutoFail, secondAutoFail ]
                    |> String.join "\n"
                    |> Just
    }
